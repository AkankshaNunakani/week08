name: CI Frontend and Backend
on:
  pull_request:
    branches: [development]
    paths: ["frontend/**","order_service/**","product_service/**"]
  push:
    branches: [main]
    paths: ["frontend/**","order_service/**","product_service/**"]
permissions: { contents: read, id-token: write, packages: write }
env: { ACR_LOGIN: ${{ vars.ACR_LOGIN }} }
jobs:
  changes:
    name: Detect changed paths
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      order: ${{ steps.filter.outputs.order }}
      product: ${{ steps.filter.outputs.product }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend: ['frontend/**']
            order: ['order_service/**']
            product: ['product_service/**']
  build_frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: changes
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && needs.changes.outputs.frontend == 'true')
    steps:
      - uses: actions/checkout@v4
      - run: echo Running frontend checks
      - uses: docker/setup-buildx-action@v3
      - if: github.event_name == 'push' && github.ref_name == 'main'
        uses: azure/login@v2
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
      - if: github.event_name == 'push' && github.ref_name == 'main'
        run: test -n "${ACR_LOGIN}" || { echo ACR_LOGIN not set; exit 0; }; az acr login --name ${ACR_LOGIN%%.*}
      - uses: docker/build-push-action@v6
        with:
          context: ./frontend
          tags: |
            ${{ env.ACR_LOGIN }}/frontend:${{ github.sha }}
            ${{ env.ACR_LOGIN }}/frontend:latest
          push: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build_backend_order:
    name: Build Backend Order Service
    runs-on: ubuntu-latest
    needs: changes
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && needs.changes.outputs.order == 'true')
    steps:
      - uses: actions/checkout@v4
      - run: echo Running backend order checks
      - uses: docker/setup-buildx-action@v3
      - if: github.event_name == 'push' && github.ref_name == 'main'
        uses: azure/login@v2
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
      - if: github.event_name == 'push' && github.ref_name == 'main'
        run: test -n "${ACR_LOGIN}" || { echo ACR_LOGIN not set; exit 0; }; az acr login --name ${ACR_LOGIN%%.*}
      - uses: docker/build-push-action@v6
        with:
          context: ./order_service
          tags: |
            ${{ env.ACR_LOGIN }}/week08/order-service:${{ github.sha }}
            ${{ env.ACR_LOGIN }}/week08/order-service:latest
          push: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build_backend_product:
    name: Build Backend Product Service
    runs-on: ubuntu-latest
    needs: changes
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && needs.changes.outputs.product == 'true')
    steps:
      - uses: actions/checkout@v4
      - run: echo Running backend product checks
      - uses: docker/setup-buildx-action@v3
      - if: github.event_name == 'push' && github.ref_name == 'main'
        uses: azure/login@v2
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
      - if: github.event_name == 'push' && github.ref_name == 'main'
        run: test -n "${ACR_LOGIN}" || { echo ACR_LOGIN not set; exit 0; }; az acr login --name ${ACR_LOGIN%%.*}
      - uses: docker/build-push-action@v6
        with:
          context: ./product_service
          tags: |
            ${{ env.ACR_LOGIN }}/week08/product-service:${{ github.sha }}
            ${{ env.ACR_LOGIN }}/week08/product-service:latest
          push: ${{ github.event_name == 'push' && github.ref_name == 'main' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
