name: CI Frontend and Backend

on:
  pull_request:
    branches: [development]
  push:
    branches: [main]
  workflow_dispatch: {}

permissions:
  contents: read
  id-token: write
  packages: write

env:
  # Example: s722acrXXXXX.azurecr.io (set as repo Action Variable)
  ACR_LOGIN: ${{ vars.ACR_LOGIN }}

# cancel duplicate runs per ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  changes:
    name: Detect changed paths
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      order: ${{ steps.filter.outputs.order }}
      product: ${{ steps.filter.outputs.product }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'frontend/**'
            order:
              - 'order_service/**'
            product:
              - 'product_service/**'

  build_frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: changes
    if: |
      (github.event_name == 'pull_request' && needs.changes.outputs.frontend == 'true') ||
      (github.event_name == 'push' && github.ref_name == 'main' && needs.changes.outputs.frontend == 'true')
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      # PR build: safe local tag, no push
      - name: Build (PR)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          tags: frontend-ci:${{ github.sha }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # main build: login + ACR tags + push
      - name: Azure login
        if: github.event_name == 'push' && github.ref_name == 'main'
        uses: azure/login@v2
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: ACR login
        if: github.event_name == 'push' && github.ref_name == 'main'
        run: |
          test -n "${ACR_LOGIN}" || { echo "ACR_LOGIN not set; skipping push build"; exit 0; }
          az acr login --name ${ACR_LOGIN%%.*}

      - name: Build & Push (main)
        if: github.event_name == 'push' && github.ref_name == 'main' && env.ACR_LOGIN != ''
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          tags: |
            ${{ env.ACR_LOGIN }}/frontend:${{ github.sha }}
            ${{ env.ACR_LOGIN }}/frontend:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build_backend_order:
    name: Build Backend Order Service
    runs-on: ubuntu-latest
    needs: changes
    if: |
      (github.event_name == 'pull_request' && needs.changes.outputs.order == 'true') ||
      (github.event_name == 'push' && github.ref_name == 'main' && needs.changes.outputs.order == 'true')
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Build (PR)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./order_service
          tags: order-service-ci:${{ github.sha }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Azure login
        if: github.event_name == 'push' && github.ref_name == 'main'
        uses: azure/login@v2
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: ACR login
        if: github.event_name == 'push' && github.ref_name == 'main'
        run: |
          test -n "${ACR_LOGIN}" || { echo "ACR_LOGIN not set; skipping push build"; exit 0; }
          az acr login --name ${ACR_LOGIN%%.*}

      - name: Build & Push (main)
        if: github.event_name == 'push' && github.ref_name == 'main' && env.ACR_LOGIN != ''
        uses: docker/build-push-action@v6
        with:
          context: ./order_service
          tags: |
            ${{ env.ACR_LOGIN }}/week08/order-service:${{ github.sha }}
            ${{ env.ACR_LOGIN }}/week08/order-service:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build_backend_product:
    name: Build Backend Product Service
    runs-on: ubuntu-latest
    needs: changes
    if: |
      (github.event_name == 'pull_request' && needs.changes.outputs.product == 'true') ||
      (github.event_name == 'push' && github.ref_name == 'main' && needs.changes.outputs.product == 'true')
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Build (PR)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: ./product_service
          tags: product-service-ci:${{ github.sha }}
          push: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Azure login
        if: github.event_name == 'push' && github.ref_name == 'main'
        uses: azure/login@v2
        with:
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client-id: ${{ secrets.AZURE_CLIENT_ID }}

      - name: ACR login
        if: github.event_name == 'push' && github.ref_name == 'main'
        run: |
          test -n "${ACR_LOGIN}" || { echo "ACR_LOGIN not set; skipping push build"; exit 0; }
          az acr login --name ${ACR_LOGIN%%.*}

      - name: Build & Push (main)
        if: github.event_name == 'push' && github.ref_name == 'main' && env.ACR_LOGIN != ''
        uses: docker/build-push-action@v6
        with:
          context: ./product_service
          tags: |
            ${{ env.ACR_LOGIN }}/week08/product-service:${{ github.sha }}
            ${{ env.ACR_LOGIN }}/week08/product-service:latest
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
