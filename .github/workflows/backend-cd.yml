name: Backend CD - Deploy to AKS

on:
  # Manual trigger with optional tag override
  workflow_dispatch:
    inputs:
      tag:
        description: "Image tag to deploy (defaults to CI run SHA)"
        required: false
  # Auto-trigger after CI succeeds
  workflow_run:
    workflows: [ "Backend CI - Test, Build and Push Images to ACR" ]
    types: [ "completed" ]

jobs:
  deploy:
    # Only run if CI concluded success, or if manually dispatched
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      ACR_LOGIN_SERVER: s722acr84438.azurecr.io
      NAMESPACE: default
      ORDER_DEPLOY: order-service-w08e1
      PRODUCT_DEPLOY: product-service-w08e1
      ORDER_CONTAINER: order-service-container
      PRODUCT_CONTAINER: product-service-container
      # If manual input provided use it, otherwise use CI run SHA
      TAG: ${{ github.event.inputs.tag != '' && github.event.inputs.tag || github.event.workflow_run.head_sha }}

    steps:
      - uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Set AKS context (needs AKS_RG and AKS_NAME secrets)
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AKS_RG }}
          cluster-name:  ${{ secrets.AKS_NAME }}

      - name: Update images
        run: |
          set -e
          kubectl set image -n "$NAMESPACE" deploy/$ORDER_DEPLOY   $ORDER_CONTAINER=$ACR_LOGIN_SERVER/week08/order-service:$TAG
          kubectl set image -n "$NAMESPACE" deploy/$PRODUCT_DEPLOY $PRODUCT_CONTAINER=$ACR_LOGIN_SERVER/week08/product-service:$TAG

      - name: Wait for rollout
        run: |
          kubectl rollout status -n "$NAMESPACE" deploy/$ORDER_DEPLOY
          kubectl rollout status -n "$NAMESPACE" deploy/$PRODUCT_DEPLOY

      - name: Show deployed images
        run: |
          kubectl get deploy -n "$NAMESPACE" \
            -o custom-columns=NAME:.metadata.name,IMAGE:.spec.template.spec.containers[0].image,READY:.status.readyReplicas
