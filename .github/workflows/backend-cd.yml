name: Backend CD - Deploy to AKS (OIDC)

on:
  workflow_dispatch: {}            # run by hand
  # Optional: auto-run after CI completes on development
  # workflow_run:
  #   workflows: ["CI Frontend and Backend"]
  #   types: [completed]
  #   branches: [development]

permissions:
  contents: read
  id-token: write

env:
  # You set these as **Actions Variables** in GitHub:
  # Settings → Secrets and variables → Actions → Variables
  AZURE_CLIENT_ID:       ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID:       ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

  # Also add ACR name as a variable (no protocol, just the resource name)
  # Example: s722acr1234
  ACR_NAME: ${{ vars.ACR_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      # If you’re pushing Docker images to ACR:
      - name: Azure CLI version
        run: az version

      - name: Login to ACR
        run: az acr login --name "${{ env.ACR_NAME }}"

      # Example: find and build backend images
      - name: Build & push backend images
        working-directory: backend
        env:
          LOGIN_SERVER: ${{ env.ACR_NAME }}.azurecr.io
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}

          # Example Dockerfiles; adjust paths/names for your project
          # If you only have one service, remove the second block.

          # Order service
          if [ -f "./order_service/Dockerfile" ]; then
            docker build -t $LOGIN_SERVER/order-service:$IMAGE_TAG ./order_service
            docker push $LOGIN_SERVER/order-service:$IMAGE_TAG
          fi

          # Product service
          if [ -f "./product_service/Dockerfile" ]; then
            docker build -t $LOGIN_SERVER/product-service:$IMAGE_TAG ./product_service
            docker push $LOGIN_SERVER/product-service:$IMAGE_TAG
          fi

      # If you also deploy to AKS, add kubelogin/kubectl steps here.
      # For example (only if you already have an AKS and kubeconfig):
      # - name: Get AKS credentials
      #   run: az aks get-credentials -g ${{ vars.AKS_RG }} -n ${{ vars.AKS_NAME }} --overwrite-existing
      #
      # - name: Set images in manifests and apply (example)
      #   run: |
      #     kubectl set image deploy/order-deploy order=$LOGIN_SERVER/order-service:${GITHUB_SHA::7} -n default
      #     kubectl set image deploy/product-deploy product=$LOGIN_SERVER/product-service:${GITHUB_SHA::7} -n default
      #     kubectl rollout status deploy/order-deploy -n default
      #     kubectl rollout status deploy/product-deploy -n default
